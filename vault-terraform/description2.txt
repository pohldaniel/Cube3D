cd /cygdrive/c/Cube3/vault-terraform/certs
choco install openssl
choco install certstrap

openssl genrsa -out root.key 4096
openssl req -x509 -new -nodes -key root.key -sha256 -days 3650 -out root.crt -subj "/CN=Vault Root CA/OU=Development/C=DE/ST=Saxonia/L=Leipzig/O=Main Gruppe" -addext "keyUsage = cRLSign, keyCertSign" -addext "extendedKeyUsage=serverAuth, clientAuth" 


cat root.key root.crt > root.pem

openssl req -new -newkey rsa:4096 -nodes -keyout vault-server.key -out vault-server.csr -subj "/CN=Vault Server/OU=Development/C=DE/ST=Saxonia/L=Leipzig/O=Main Gruppe" -addext "subjectAltName=DNS:localhost,IP:127.0.0.1" -addext "keyUsage=critical,digitalSignature" -addext "extendedKeyUsage=serverAuth"
openssl x509 -req -CA root.crt -CAkey root.key -CAcreateserial -in vault-server.csr -out vault-server.crt -days 3650 -extfile <(printf "subjectAltName=DNS:localhost,IP:127.0.0.1\nextendedKeyUsage=serverAuth\nkeyUsage=critical,digitalSignature")


openssl req -new -newkey rsa:4096 -nodes -keyout vault-client.key -out vault-client.csr -subj "/CN=Vault Client/OU=Development/C=DE/ST=Saxonia/L=Leipzig/O=Main Gruppe" -addext "keyUsage=critical,digitalSignature" -addext "extendedKeyUsage=clientAuth"
openssl x509 -req -CA root.crt -CAkey root.key -CAcreateserial -in vault-client.csr -out vault-client.crt -days 3650 -extfile <(printf "extendedKeyUsage=clientAuth\nkeyUsage=critical,digitalSignature")



openssl req -new -newkey rsa:4096 -nodes -keyout vault-int.key -out vault-int.csr -subj "/CN=Vault Intermediate/OU=Development/C=DE/ST=Saxonia/L=Leipzig/O=Main Gruppe" -addext "keyUsage =critical,cRLSign,keyCertSign"
#openssl x509 -req -CA root.crt -CAkey root.key -CAcreateserial -in vault-int.csr -out vault-int.crt -days 3650 -extfile <(printf "subjectAltName=DNS:localhost,IP:127.0.0.1\nbasicConstraints=critical,CA:TRUE\nextendedKeyUsage = clientAuth\nsubjectKeyIdentifier=hash\n[ policy_anything ]\nOU=Development\nO=Main Gruppe\ncountryName=DE\nstateOrProvinceName=Saxonia\nlocalityName=Leipzig")
openssl x509 -req -CA root.crt -CAkey root.key -CAcreateserial -in vault-int.csr -out vault-int.crt -days 3650 -extfile <(printf "basicConstraints=critical,CA:TRUE,pathlen:1\nkeyUsage =critical,cRLSign,keyCertSign")
cat certs/vault-int.crt certs/vault-int.key > certs/vault-int.pem


openssl req -new -newkey rsa:4096 -nodes -keyout daniel.key -out daniel.csr -subj "/CN=Daniel Pohl/OU=Development/C=DE/ST=Saxonia/L=Leipzig/O=Main Gruppe" -addext "subjectAltName=DNS:localhost,IP:127.0.0.1" -addext "keyUsage = cRLSign, keyCertSign, digitalSignature" -addext "extendedKeyUsage=clientAuth"
openssl x509 -req -CA vault-int.crt -CAkey vault-int.key -CAcreateserial -in daniel.csr -out daniel.crt -days 3650 -extfile <(printf "subjectAltName=DNS:localhost,IP:127.0.0.1\nextendedKeyUsage=clientAuth\nkeyUsage=keyAgreement,digitalSignature\nbasicConstraints=critical,CA:FALSE")
cat daniel.crt > daniel.pem
openssl pkcs12 -export -out certs/daniel.p12 -inkey certs/daniel.key -in certs/daniel.crt  -name "Daniel Pohl"


#openssl x509 -in vault.crt -out vault.pem -outform pem
openssl pkcs12 -export -out vault-int.p12 -inkey vault-int.key -in vault-int.crt -name "Vault Intermediate"  -passout pass:

openssl pkcs12 -export -out certs/daniel.p12 -inkey daniel-private-key.pem -in daniel-certificate.pem -name "Daniel Pohl"

openssl x509 -in vault-int.crt -text -noout


openssl pkcs12 -export -out vault.p12 -inkey vault.key -in vault.crt -certfile root.crt -name "Client Vault"  


#openssl pkcs12 -in vault.p12 -out vault.pem -nodes -passin pass:password
#openssl pkcs12 -export -in vault.pem -out vault2.p12 -passout pass:password -name "Client Vault"


#openssl pkcs12 -export -out root.p12 -in root.crt -nodes -name "Root Vault"
#openssl pkcs12 -in root.p12 -out root.pem -nodes -passin pass:password


vault write pki_int/roles/vault-cert allow_any_name=true max_ttl="720h" generate_lease=true


vault pki_int enable roles


vault write auth/cert/certs/web display_name=web policies=web,prod certificate=@web-cert.pem ttl=3600


vault write -format=json pki/root/generate/internal common_name="vault-ca-root-pki" | tee >(jq -r .data.certificate > vault-ca-root-pki.pem) >(jq -r .data.issuing_ca > vault-ca-root-pki-issuing.pem) >(jq -r .data.private_key > vault-ca-root-pki-key.pem)

./vault write -format=json pki/root/generate/internal \
common_name="vault-ca-root-pki" | tee \
>(jq -r .data.certificate > vault-ca-root-pki.pem) \
>(jq -r .data.issuing_ca > vault-ca-root-pki-issuing.pem) \
>(jq -r .data.private_key > vault-ca-root-pki-key.pem)

./vault write pki/config/urls issuing_certificates="http://localhost:8200/v1/pki/ca" crl_distribution_points="http://localhost:8200/v1/pki/crl"

./vault write -format=json pki_int/intermediate/generate/internal \
common_name="vault-ca-root-pki Intermediate Authority" \
| jq -r '.data.csr' > vault-ca-root-pki-int.csr


./vault write -format=json pki/root/sign-intermediate csr=@vault-ca-root-pki-int.csr \
common_name="vault-ca-root-pki-int" \
format=pem_bundle ttl="43800h" \
| jq -r '.data.certificate' > vault-ca-root-pki-int.pem

./vault write pki_int/intermediate/set-signed certificate=@vault-ca-root-pki-int.pem

./vault write pki_int/config/urls issuing_certificates="http://127.0.0.1:8300/v1/pki_int/ca" crl_distribution_points="http://127.0.0.1:8300/v1/pki_int/crl"

./vault policy write vault-cert vault-cert.hcl


./vault write pki_int/roles/vault-cert \
allow_any_name=true \
max_ttl="720h" \
generate_lease=true

./vault write -format=json pki_int/issue/vault-cert \
common_name="vault-cert" | tee \
>(jq -r .data.certificate > vault-cert-certificate.pem) \
>(jq -r .data.issuing_ca > vault-cert-issuing-ca.pem) \
>(jq -r .data.private_key > vault-cert-private-key.pem)

./vault auth enable cert

./vault write auth/cert/certs/vault-cert \
display_name=vault-cert \
policies=vault-cert \
certificate=@vault-cert-certificate.pem

./vault login -method=cert -client-cert=vault-cert-certificate.pem -client-key=vault-cert-private-key.pem name=vault-cert

vault write pki_int_ca/roles/vault-cert allow_any_name=true max_ttl="720h" generate_lease=true


./vault write -format=json pki_int_ca/issue/user-cert \
common_name="pohl.daniel@freent.de" | tee \
>(jq -r .data.certificate > vault-cert-certificate.pem) \
>(jq -r .data.issuing_ca > vault-cert-issuing-ca.pem) \
>(jq -r .data.private_key > vault-cert-private-key.pem)

vault write pki_int_ca/root/replace default=964dbefd-c33f-4052-3160-1c261a278c06

vault write  pki_int_ca/pki/int pem_bundle=@vault.pem

vault write pki_root_ca/config/ca pem_bundle=@vault.pem
vault write pki_root_ca/root/replace default=5af3c0f6-e07d-ce17-19f9-503d175ab3bd


vault write pki_int_ca/config/ca pem_bundle=@certs/vault-int.pem

vault write pki_int_ca/issue/client-cert-for-mydomain.com ttl=31556952 common_name="steve.dillon@mydomain.com"

vault write pki_int_ca/roles/user-cert allow_any_name=true max_ttl=”720h” generate_lease=true

./vault write -format=json pki_int_ca/issue/user-cert \
common_name="pohl.daniel@freent.de" | tee \
>(jq -r .data.certificate > daniel-certificate.pem) \
>(jq -r .data.issuing_ca > daniel-issuing-ca.pem) \
>(jq -r .data.private_key > daniel-private-key.pem)

vault write auth/cert/certs/daniel-cert display_name=daniel-cert policies=user-cert certificate=@daniel-certificate.pem

vault write auth/cert/certs/daniel_cert display_name=daniel policies=user-cert certificate=@certs/daniel.crt -format=json > output/daniel.json

vault write pki_int_ca/issue/user-cert common_name="DanielPohl" ip_sans="127.0.0.1" lt_names="localhost" -format=json > daniel.json

ng serve --ssl true --ssl-key "vault-int.key" --ssl-cert "vault-int.crt" --host localhost --port 4200



vault write -format=json pki_int/intermediate/generate/internal common_name="Vault Intermediate" key_type=ec key_bits=256 > vault-int.csr.json
cat vault-int.csr.json | jq -r '.data.csr' > vault-int.csr
openssl req -text -noout -verify -in vault-int.csr
vault write -format=json pki_int/issuers/import/bundle pem_bundel=@certs/vault-int.pem




vault write -format=json pki_iss/intermediate/generate/internal organization="Main" common_name="Vault Issuing" key_type=rsa key_bits=4096 > vault-iss.csr.json
cat vault-iss.csr.json | jq -r '.data.csr' > vault-iss.csr
openssl req -text -noout -verify -in vault-iss.csr
vault write -format=json pki_int/root/sign-intermediate organization="Main" csr=@vault-iss.csr ttl=8760h format=pem > vault-iss.crt.json
cat vault-iss.crt.json | jq -r '.data.certificate' > vault-iss.crt
openssl x509 -in vault-iss.crt -text -noout
cat vault-iss.crt certs/vault-int.crt > vault-iss.pem
vault write -format=json pki_iss/intermediate/set-signed certificate=@vault-iss.pem


vault write -format=json pki_iss/issue/user-cert common_name="Daniel Pohl" > daniel.crt.json


ng serve --ssl true --ssl-key angular-server.key --ssl-cert angular-server.crt --host localhost --port 4200

https://github.com/Baeldung/spring-security-oauth/tree/master/oauth-authorization-server

curl -L -X POST "http://auth-server:8200/oauth2/token" -H "Content-Type: application/x-www-form-urlencoded" --data-urlencode "scope=openid" --data-urlencode "code=P" --data-urlencode "grant_type=authorization_code" --data-urlencode "client_id=cube" --data-urlencode "client_secret=secret" --data-urlencode "redirect_uri=http://localhost:8080/spring/oidc/callback"  

https://stackoverflow.com/questions/47202657/spring-security-oauth2-post-request-to-oauth-token-redirects-to-login-and-role